name: Django-app workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements.txt
    - name: Test with flake8 and django tests
      run: |
        python -m flake8

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: smildon/foodgram:latest

  copy_configs:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - uses: actions/checkout@v2
      - name: copy start files via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{  secrets.HOST }}
          username: ${{ secrets.USER  }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "docker-compose.yaml, nginx/"
          target: "~/foodgram"
          overwrite: true

  deploy:
    runs-on: ubuntu-latest
    needs: copy_configs
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          stack_file_name: docker-compose.yaml
          script: |
            cd foodgram
            sudo docker-compose stop
            sudo docker-compose rm web
            FILE=.env
            if [ -f "$FILE" ]
            then
              echo "$FILE exists and will removed"
              rm $FILE
            else
              echo "$FILE does not exist"
            fi
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DEBUG=off >> .env

      - name: Compose up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest
            id=$(docker create ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest)
            FILE=docker-compose.yml
            echo $id
            cd foodgram
            sudo docker rm -v $id
            sudo docker stop $(sudo docker ps -a -q) > /dev/null 2>&1
            sudo docker kill $(sudo docker ps -a -q) > /dev/null 2>&1
            sudo docker-compose up -d --force-recreate
      - name: Prepare django
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd foodgram
            sudo docker-compose exec -T web python3 manage.py collectstatic --noinput
            sudo docker-compose exec -T web python3 manage.py migrate --noinput
            sudo docker-compose exec -T web python3 manage.py load_test_data
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!